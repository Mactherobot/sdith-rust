[package]
name = "rsdith"
description = "SDitH Signature Scheme Protocol from NIST Post-Quantum Cryptography Standardization, Additional signature schemes round 2"
version = "0.0.0"
edition = "2021"
resolver = "2"
default-run = "cli"                                                                                                                       # Default run the cli

# We manually specify targets below
autobenches = false
autotests = false
autobins = false

## Dependencies

[dependencies]
tiny-keccak = { version = "2.0.2", features = ["shake", "sha3"] }
queues = "1.0.2"
clap = { version = "4.5.20", features = ["derive"] }
colored = "2"
rand = "0.8.5"
base64 = "0.22.1"
rayon = { version = "1.10.0", optional = true }
blake3 = { version = "1.5.4", optional = true }
hex = { version = "0.4.3", optional = true }
criterion-cycles-per-byte = { version = "0.6.1", optional = true }
nist-pqc-seeded-rng = { version = "0.2.0", optional = true }
tikv-jemallocator = { version = "0.5.0", optional = true }
mimalloc = { version = "*", optional = true }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
dudect-bencher = "0.6.0"
nist-pqc-seeded-rng = "0.2.0"
stats-ci = "0.1.1"

[build-dependencies]
dotenv_codegen = "0.15.0"
rustc_version = "0.4.1"

## Targets

# TODO: Move library into workspace to ensure that lib only compiles what it needs. 
# Then we can use the package as a dependency for the cli binary in main.rs
# https://stackoverflow.com/a/47113822
[lib]
name = "rsdith"
path = "src/lib.rs"
bench = false       # Prevents benchmarks from running src/lib.rs tests
doctest = false     # Prevents doctests from src/lib.rs

[[bin]]
name = "cli"
path = "src/bin/cli/mod.rs"
test = false                # Prevents tests from cli
bench = false               # Prevents benchmarks from cli

[[bin]]
name = "profiling_sign"
path = "src/bin/profiling/sign.rs"
test = false                       # Prevents tests from profiling
bench = false                      # Prevents benchmarks from profiling

[[bench]]
name = "benchmark"
path = "benches/benchmark.rs"
harness = false

[[example]]
name = "dudect"
path = "examples/dudect.rs" # Dudect Constant Time Benchmark has to be run as an example
bench = false
harness = false

## Profiles

[profile.dev]
debug = 1
opt-level = 3

[profile.baseline]
inherits = "dev"
opt-level = 0    # Disables all optimizations
lto = "off"      # Disables link time optimizations

[profile.release]
strip = "debuginfo" # Strips debug information from the binary
codegen-units = 1   # Removes parallel code compilation for slower compilation times, but sometimes increases performance and reduces binary size.
lto = "fat"         # Performs “fat” LTO which attempts to perform optimizations across all crates within the dependency graph.
opt-level = 3       # Optimizes 0: no optimizations, 1: some optimizations, 2: all optimizations, 3: all optimizations, "s": optimize for binary size, "z": optimize for binary size, but also turn off loop vectorization.
panic = "abort"     # https://nnethercote.github.io/perf-book/build-configuration.html#abort-on-panic

[profile.bench]
inherits = "release"

## Linting

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(CHANNEL_NIGHTLY)'] }

## Features
[features]
default = ["optimized"]

# Categories
category_one = [] # This is the default category.
category_three = []
category_five = []
category_custom = [
] # Use in conjunction with `SDITH_CUSTOM_PARAMS_PATH` environment variable

# Optimization features
optimized = ["simd", "parallel", "merkle_batching"]
parallel = ["dep:rayon"]
simd = []
jemalloc = ["dep:tikv-jemallocator"]
mimalloc = ["dep:mimalloc"]
merkle_base = []
merkle_batching = []

# Testing and Benchmarking features
cycles_per_byte = ["dep:criterion-cycles-per-byte"] # Benchmarking feature
kat = ["dep:hex", "dep:nist-pqc-seeded-rng"]        # Include Known Answer Tests
flat_sampling = []

# Experimental features
blake3 = ["xof_blake3", "hash_blake3"]
xof_blake3 = ["dep:blake3"]
hash_blake3 = ["dep:blake3"]
mul_shift_and_add = []
